#+TITLE: 快速 RSA 的实现

* 需求分析
** 输入输出
- 提供生成密钥的功能
- 使用整数类型进行输入输出
** 大素数生成
1. 利用 Miller-Robin 算法快速检验是否为素数
2. 在给定范围内利用随机算法反复测试直到找到两个素数为止
** 加密
直接利用快速幂算法实现
** 解密
直接利用快速幂算法实现
** 与 DES 算法的结合
为 DES 算法加入 RSA 选项，开启后将询问用户要使用的加密/解密密钥，并用该密钥使用
RSA 算法加密/解密 DES 所用的密钥
* 实现环境
- 编程语言 :: Python 2.7.10
- 测试系统 :: OS X 10.11
- 项目主页 ::
     [[https://github.com/dsdshcym/InfoSec-Projects/tree/rsa/RSA]]
* 源码说明
** 概述
- 本次实验使用 Python 完成，包括两个文件 ~RSA.py~ 和 ~RSA_test.py~ 以及之前的
  ~des.py~
  - ~RSA.py~

    主要函数的文件，被 ~des.py~ 调用实现为 DES 算法加密密钥的功能

  - ~RSA_test.py~

    测试文件，包括了对 ~RSA.py~ 的单元测试和集成测试，共 8 项，全部通过
** 使用说明
在之前的 ~des.py~ 的基础上，加入新的选项
- 使用 RSA 加密密钥

  可通过 ~-u~ 来设置，设置后将询问加密/解密用的 RSA 密钥，并以此加密 DES 密钥
** 程序说明
只对 ~RSA.py~ 中的函数进行说明，对 ~RSA_test.py~ 中的函数省略
- 用到的函数库
  - ~random~ ::
       产生随机素数所需
  - ~math.log~ ::
       进行快速幂计算需要
  - ~sys~ ::
       改变 Python Path 引入与 DES 算法的公用函数
- 函数说明
  - ~euclid~ ::
       欧基里德算法求最大公约数
  - ~extended_euclid~ ::
       扩展欧基里德算法
  - ~coPrime~ ::
       判断两个数是否互质
  - ~extract_two_power~ ::
       将偶数 n-1 拆解为 $2^km$ 的格式，是 Miller-Robin 算法的第一步
  - ~mod_exp~ ::
       快速幂算法
  - ~Miller_Robin~ ::
       Miller-Robin 算法
  - ~mul_inverse~ ::
       求乘法逆元的算法
  - ~find_a_prime~ ::
       在给定区间内寻找素数的算法，其中 k 为 Miller-Robin 算法测试次数
  - ~generate_key~ ::
       在给定区间内产生公钥私钥的算法，其中 k 为 Miller-Robin 算法测试次数
  - ~encrypt~ ::
       加密函数
  - ~decrypt~ ::
       解密函数
* Demo
** DES 加密
- 输入
  - IV ::
       0111010001001111000001100100010010100011000001001010011001010101
  - 原码 ::
       0110001101101001011101000110111001110100011100110110010101110100
  - 密钥 ::
       0011100000110111001101100011010100110100001100110011001000110001
  - RSA N ::
       用上述程序生成公钥如下
       1326162035005000950106013602369815335467156270375900572390401097278337416881963861242580798549682618030605813761973133271651465622748925714486874773253976315336395817937306419559563723728653319853771423
  - RSA D ::
       184433049961840592825475918447717146625823550301453306618886396181387984674320693333750946086928450847883201082261082837892524924415395838194452580811551927253606388280774574249671807263864163790020221
- 运行结果
  #+BEGIN_SRC sh :exports both :dir ../DES :results output
    cat plain.txt
    python des.py -i plain.txt -o cipher.txt
    cat cipher.txt
  #+END_SRC

  #+RESULTS:
  : // plain.txt
  : 0111010001001111000001100100010010100011000001001010011001010101
  : 0110001101101001011101000110111001110100011100110110010101110100
  : // cipher.txt
  : 1010011100110011111101010111000011000100100110101001011110110100 // 加密后的 IV
  : 10001100110000000111011010001101001011010101100011011111011111011111010110000111110001000001011100100100111100011100101100101000 // 密文
  : 10111101110111010110001010000110010110100101001000101000011111001000000011000011111111111010110101010000110100101010101001001001001110000001000010010011010011001011100010011010000110100001111010011001011101010110000110011110111100100011111110100100100110101001100011111001111101001000100000111101001110001010010110111101111000011001001011011110010110111111111101110010011000100000001001110001001000010100110111101010101111001011111100010101100001101001001011110110010011010100000000000010101111010010011100010100011011001001111110101111101101000010100001110000101111001000001111000101100001100010100110111011110011110011101000111000100011100000001010110101110000110100 // 加密后的密钥
** 解密
- 输入
  - 加密后的 IV ::
       1010011100110011111101010111000011000100100110101001011110110100
  - 密文 ::
       10001100110000000111011010001101001011010101100011011111011111011111010110000111110001000001011100100100111100011100101100101000
  - 密钥 ::

  - RSA N ::
       1326162035005000950106013602369815335467156270375900572390401097278337416881963861242580798549682618030605813761973133271651465622748925714486874773253976315336395817937306419559563723728653319853771423
  - RSA E ::
       1151539360679563081561143534561240973918841697293162653233501792464702512437861742840327806683588798838963165882034712786592690164059040270028032287038439496513587732670550879031452440222132377611759781
- 运行结果
  #+BEGIN_SRC sh :exports both :dir ../DES :results output
    python des.py -i cipher.txt -d -u
  #+END_SRC

  #+RESULTS:
  : 01100011011010010111010001101110011101000111001101100101011101001101100111001100111011000101011000001101110110010001011100111000
